Lua：函数
==========

在本节中，我们将学习编写函数。函数就是一个带有名字的代码块，用来完成具体的工作。

定义函数
----------

下面是一个打印问候语的简单函数：

.. code:: lua

   local greet = function()
     print("Hello!")
   end

   greet()

这个实例演示了最简单的函数结构。第一行使用关键字 ``function`` 来告诉Lua你要定义一个函数。
这是 *函数定义* ，向Lua指出了函数名，还可能在括号内指出函数为完成其任务需要什么样的信息。
在这里，函数名为greet()，它不需要任何信息就能完成其工作，因此括号是空的（即便如此,括号也必不可少）。

紧跟在第一行之后的那个代码块被称为 *函数体* 。代码行 ``print("Hello!")`` 是函数体内的唯一一行代码，
greet()只做一项工作：打印Hello!。

要使用这个函数，可调用它。函数调用让Lua执行函数的代码。要调用函数，
可依次指定函数名以及用括号括起的必要信息。由于这个函数不需要任何信息，
因此调用它时只需输入greet()即可。和预期的一样，它打印Hello!。

.. hint::

   注意函数定义的语法其实是和定义变量一样： ``local xxx = xxx`` 。
   事实上，Lua函数本质上是变量值的一种。如果你执行 ``print(greet)`` 的话会输出类似
   function: 0xdeadbeef 之类的信息。

向函数传递信息
~~~~~~~~~~~~~~~

只需稍作修改，就可以让函数greet()不仅向用户显示Hello!，还将用户的名字也一起问候出来。
为此，可在函数定义 ``local greet = function()`` 的括号内添加 username。
通过在这里添加username，就可让函数接受你给username指定的任何值。现在，
这个函数要求你调用它时给username指定一个值。调用greet()时，可将一个名字传递给它，如下所示：

.. code:: lua

   local greet = function(username)
     print("Hello, " .. username .. "!")
   end

   greet("notify")

代码 ``greet("notify")`` 调用了函数greet()，并提供函数需要的信息。这个函数接受你传给他的名字，
并发出问候：Hello, notify!

实参与形参
~~~~~~~~~~

前面定义函数greet()时，要求给变量username指定一个值。
调用这个函数并提供这种信息(人名)时，它将打印相应的问候语。

在函数greet()的定义中，变量username是一个 *形参* ——函数完成其工作所需的一项信息。
在代码 ``greet("notify")`` 中，值"notify"是一个 *实参* 。实参是调用函数时传递给函数的信息。
我们调用函数时，将要让函数使用的信息放在括号内。在 ``greet("notify")`` 中，
将实参 "notify" 传递给了函数greet()，这个值被存储在形参username中。

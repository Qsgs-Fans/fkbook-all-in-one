开发草稿：AI体系设计
======================

算法大方向的选择
-----------------

AI是个很宽泛的概念，根据wiki所述，是指用以模拟人类智能的程序。对于这个游戏而言，
AI的责任自然就是选出合乎逻辑的三国杀出牌操作。在民间三国杀发展的十余年历史中，
大致提出过以下几种观点：（我自己对人工智能的了解有限，难以用专业术语进行表达）

- 编写程序直接进行推理，通过if-else之类的语句对环境中各种情况进行直接考虑
- 通过组建联机服务器收集大量玩家作答数据，基于这些数据和机器学习算法训练模型
- 基于收益论对多种组合进行决策
- 构建知识库以便模拟某个决策的未来状况，进而获取更好的决策评判标准

其中不少AI算法对算力要求相当高，而新月杀AI的需求之一是低消耗、快响应（能在手机上
玩带AI的单机模式、一次思考最好在1000ms之内得出）。因此我们可能也会偏向使用其他
民间三国杀的AI算法（太阳神！或许吧，唉手搓决策）并在其基础上针对拓展性等等进行优化？其他AI算法
可能也值得一试。

AI需要处理的主要问题
---------------------

总而言之，在这个游戏中，AI负责代替真人玩家针对各种询问作答，由于没有对应的真人玩家，
自然也就没有客户端去执行AI的代码，所以AI运行于服务端。
用于辅助作答的环境数据有Room以及和本次询问有关的数据（askFor系列函数的传参，以及
对于数据特别复杂的询问设计了专门的 ``RequestHandler`` 进行处理）。数据也分简单和
复杂两种。

- 简单的：询问确定/取消（askForSkillInvoke）、询问m选n（askForChoices）
- 复杂的：很不幸的占了全游戏绝大部分，所以反而需要先解决复杂的：PlayCard、
  askForUseActiveSkill、askForResponseCard、askForUseCard

由于上面提到的复杂的四种操作都涉及了面板（手牌区、技能按钮区、以及选角色等），
所以后面将其称为“面板类”。

最开始的时候，面板类询问的所有合法性判断都在UI代码中进行判断，最近一个版本（v0.4.22）
才将这些合法性的代码转移到了Lua中，并且允许AI进行复用，在重构的过程中这些合法性判断的
逻辑才逐渐清晰起来。以免我忘了，这里就对它们的逻辑进行梳理：

- 前提：可操作元素共有四种：技能按钮、卡牌、目标、额外信息（所谓interaction）
- 初始化：程序决定出所有可以点触的元素，不可点触的元素则暗置。
- 几种元素的操作优先级为按钮>额外信息>卡牌>目标。操作优先度高的元素会导致之后的元素被初始化。

还是难以梳理，总之客户端在这样受限的情况下不断按照自己的思考路线去点击卡牌和角色等，
最后按下确定键（如果亮着的话）或者直接按取消键。在按下确定的情况下，用户最终会按照上文所述的
优先级顺序进行一系列点击，然后按下确定。举个例子，标准版孙权正在思考出牌阶段，装备区有丈八蛇矛，
手中有5张手牌。孙权选择了发动制衡：按下制衡按钮，依次选择手牌A、手牌C、手牌D，确定。
如此就形成了操作序列：Btn->CardA->CardC->CardD->OK。

状态图与搜索
--------------

AI复用了这样的点击逻辑（以免去编写冗余合法性判断的代码），因此它的目标也是寻找出一个
可以点击确定按钮的序列（称为“合法序列”吧）。问题在于这样的序列实在太多，以上面的例子：

- 使用丈八蛇矛：选择两张手牌即可，有10种；再选择【杀】的目标，于是乘以可选择角色数量
- 使用制衡：选择1-5张手牌后点OK键，总共有2的5次方-1=31种。
- 直接出牌：各个可使用手牌，然后每张手牌根据可选目标又衍生出新的分支

按目前的环境而言手里有十几张牌外加两三个技能是很常见的事情，然而合法序列的数量是随它们
指数增长的，这个问题是不可忽视的。同样的原理，<已选技能, 已选卡牌, 已选目标, 额外信息>
的组合数也是很惊人的。我们可以设想一个状态图，把每种组合视为一种状态，
那么每个状态是图中的一个结点，通过操作某个元素可以实现状态之间的转换（状态图中的边）。
能让确定键亮起的状态称为“合法状态”，那么合法序列就是状态图中的一个从初始状态到某个
合法状态的搜索路径。

用一个更加简单的例子说明状态图吧。场上有3名角色，黄盖、孙权、华佗。
目前是一号位的出牌阶段。一号位手里有一张杀和一张闪，装备丈八蛇矛，以及技能苦肉。
下图表示出了所有可能的操作状态以及状态转换：

.. uml:: ./uml/ai-state-example.puml

虽然所有状态都能返回自己之前的状态，但由于图表示的是寻找合法状态的过程，因此绘制的是有向图。
此外省略了一部分回溯（取消点击丈八蛇矛后所有的已选卡牌都恢复到了未选状态）。说到图搜索，
既然我们想要找出某种“最优策略”，那就不能针对无权图进行研究，每条边应该带有权值才是。
刚好三国杀有一套收益论，虽然不是很懂，但是可以认为某种操作会带来某种收益，收益可以为
正亦可以为负；这似乎可以对应于图中的权值。以及图中的权值（这条边对应的操作的收益）
是随手标的。最后，图中的“叶子结点”（这个图看起来像一棵树就这么叫了）表示这个结点是合法状态。

我们很容易就看出，这个带权图中最优路径是对孙权使用真【杀】。但是在真实情况中因为状态
太多根本没法构造图出来，以及…… 总之暂且考虑用贪心DFS吧。允许拓展自定义搜索/剪枝算法
不就行了。

收益论与推理
-------------

搜索问题总算解决了（或许），那么边权又该怎么设计？

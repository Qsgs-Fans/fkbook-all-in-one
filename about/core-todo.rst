FreeKill核心组件的TODO list
==============================

这里是我对整个FreeKill发展路线的大致规划，以及某些实现思路

如果您有意参与到开发之中，请看 :doc:`../for-devs/join-us` 。

短期目标：重置基础UI
----------------------

计划按如同 `Gnome HIG <https://developer.gnome.org/hig/index.html>`_ 中叙述的那样，
重新设计界面UI。应用使用的组件参考 `Adw Widget Gallery <https://developer.gnome.org/hig/index.html>`_
那样的风格，基于QML的QtQuick Controls重新造轮子，目前造的也还算好。

建议装一个基于Gnome桌面的Linux虚拟机体验一下这样的UI设计风格。
至于游戏内的ui风格因游戏而异。

- 造轮子，复刻Adw组件并拓展一些自己的，作为整个程序通用组件
- 重新设计配置用页面布局，使用造好的轮子拼出设置界面
- 完成以上后再看下一步

短期目标：单独且通用的房间内等待UI
--------------------------------------

现在的房内等待UI直接复用了新月杀界面，无法满足通用游戏开发需求（并且也并不美观）。
需要单开一个Page做房内等待页。

既然要通用，就不能被新月杀一直以来的UI局限住，可以想办法让房间进入更多玩家之类的。

- 设计等待页的UI（聆听已经绘制了草图）
- 设计新的UI逻辑，以适配当前服务端逻辑

说到UI逻辑那就要考虑到正常进房等人开局、重连与旁观、游戏结束点击回到房间、录像回放这几个场景。
目前的设想是：

- 服务器发来EnterRoom时，UI推入等待页。
- 服务器发来StartGame时，UI动态加载游戏内场景，然后推入该页面
- 旁观和重连时，客户端Lua代码会向ui发出上述两条消息，但是顺序值得商榷
- 回到房间时，弹出游戏页面，重新加载等待页

下一阶段的开发中，若收到StartGame，则根据房间内settings中填写的信息获得要加载的游戏类型，
再完成动态加载。

中期目标：支持拓展新游戏
---------------------------

并非一直以来基于基础新月杀开发游戏模式（UI受很大限制），而是完全不同的游戏。
当然得完成前面几项后才能考虑，因此目前无法列出todo list，只有几点思路，
以下的前提都是基于PVP回合制游戏（FreeKill本来目标就是模拟回合制桌游）：

- 新游戏要支持保存自定义数据，不是每个游戏都保存一模一样的胜率数据
- 没得说，必须支持新的游戏内UI，为此必须完成房间内等待界面开发将新月杀的界面和FreeKill整体界面解耦；必须优化QML代码使得不同的游戏内界面对同一command产生不同效果；需要进一步优化QML文件夹整体组织体系，提高代码重用性以及组织合理性。现在的QML代码差不多就是乱搞异同能跑就行。
- 支持自定义服务端逻辑（现在应该已经能通过派生 ``GameEvent.Game`` 实现自定义服务端逻辑，通过 ``GameMode`` 应用新的服务端游戏逻辑）

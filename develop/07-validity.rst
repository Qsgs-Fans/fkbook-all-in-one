双端 - 合法性检验
==================

本次的注意点主要在于合法性检验。合法性检验的目的无非就是各种卡牌、角色、
按钮是否可以点击，这是简单的用例图：

.. uml:: ./uml/s-validity-usecase.puml

从这些用例可以看出，合法性检测围绕着操作界面中各个元素是否可点击而展开，而需要\
判断各种是否可点击的场景只有在客户端需要回应请求时（例如，对“出牌阶段请使用\
一张牌”这样常见的请求做出回应；AI的场景下也有类似的需求）。而目前需要构造出比较\
统一的合法性检测逻辑直接对相关组件能否点击进行判断，所以方案之一就是在当前房间\
构造一个结构体来存储本次思考所涉及的一切数据，而相关的检测函数很大程度上依赖\
这样的操作数据。

为了保存各种Request中属性的稳定，需要给他们定义类并创建相应的实例，\
因此所有Request类型都需要定义自己的类。这样的类中必须含有这些要素：

- 数据：即服务端传来的各种数据，主要是函数参数
- UI：用来对应这个Request对应的游戏可操作界面

其中UI的设计又尤为复杂，UI必须包含这些属性：含有的各种UI组件，UI更新策略。\
UI组件又需要单独创建一个类进行描述；更新策略接收一个change作为参数并更新所有其他\
组件的情况。

任何对UI的操作（如onClicked、onTapped等操作信号）都会触发Lua函数，该函数修改\
相应的状态，并将状态传递给QML，QML再更新各个对应组件的属性。interaction也视为是一个UI组件。

综合分析，可以设计出类图草图：

.. uml:: ./uml/s-validity-class.puml

然后对UI再进行继承，为update方法添加更多细节，而这些继承类就成了本次设计的重点。

手牌面板
------------

手牌面板的组件有：手牌区UI内所有牌（包括可能弹出的装备区与expandPile），确定取消，
技能按钮，泛用组件interaction（现在忽略），所有角色的角色框。这其中所有UI组件
按下后都会产生一个动作，基本上是修改自己的选择状态，但是确定取消按钮一般有更复杂
逻辑。然后这些动作最终会转到update函数中，进而更新QML中UI的实际展现。

负责操作手牌面板的request有四种，出牌、用牌、打出、主动技询问。

首先解决的问题就是构建出这样的Scene，这就需要构造函数出马了。总之构造函数中\
根据Self的诸多属性一一创建了对应的模拟UI组件咯。光有组件还不够，还需要设置其\
亮灭（DashBoard::enableCards）。设置完亮灭后就完成构建了，触发一次notifyUI。

随着玩家的各种点击，UI结构体也不断随之执行操作，大部分是update，并将修改后的结果告诉UI，
也有直接导致reply并终止本次交互的。

自订面板
------------
